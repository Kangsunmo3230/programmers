package org.example.sort;

/**
 * 버블 정렬
 *
 */
public class question1 {
    public static void main(String[] args) {
        /**
         * 버블 정렬 => 데이터의 인접 요소끼리 비교하고 , swap 연산을 수행하며 정렬하는 방식
         *  버블 정렬은 두 인접한 데이터의 크기를 비교해 정렬 하는 방법
         *  시간 복잡도는 O(n2)으로 다른 정렬 알고리즘보다 속도가 느림
         *
         *  만약 루프의 전체 영역에서 swap이 한 번도 발생하지 않았다면, 프로세스를 종료해도 됩니다.
         */

        /**
         * 선택 정렬
         * 대상 데이터에서 최대나 최소 데이터를 데이터가 나열된 찾아가며 선택하는 방법인다.
         * 선택 정렬은 구현 방법이 복자합고 시간 복잡도 O(n2)
         * => 최솟값 또는 최대값을 찾고 남은 정렬의 부분의 강장 앞에 있는 데이터와 swap 하는것이 핵심
         */

        /**
         * 삽입 정렬
         * 이미 정렬된 데이터 범위에 정렬되지 않은 데이터를 적적한 위치에 삽입시켜 정렬하는 방식이다.
         * 시간 복잡도 O(n2) 느림.
         * 1. 현재 index에 잇는 데이터 값을 선택한다.
         * 2. 현재 선택한 데이터가 정령된 데이터에 범위에 삽일될 위치를 탐색한다.
         * 3. 삽입 위치부터 index에 있는 위치까지 shift 연산을 수행한다.
         * 4. 삽입 위치에 현재 선택한 데이터를 삽입하고 index ++ 연산을 수행한다.
         * 적절한 삽입 위치를 탐색하는 부분에서 이진 탐색 등 과 같은 탐색 알고리즘을 사용하여 시간 복잡도를 줄일 수 있습니다
         *
         */

        /**
         *  퀵 정렬
         *  기준값을 선정해 해당 값보다 작은 데이터와 큰 데이터로 분류하는 것을 반복해 정렬하는 알고리즘이다.
         *  시간 복잡도 평균은 N 최악의 경우 O(n2)
         *
         */

        int arr [] = {1,2,4,3,6,5};

    }
}
